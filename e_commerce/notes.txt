--> Super User
    Username: e_commerce
    Password: e_commerce

--> Other Users
    Username: Random
    Password: pqrs5678

--> PayPal user accounts

1.  Email ID: hp1209@gmail.com
    System Generated Password: n.V^BD0{

2. Email ID: ramesh1208@gmail.com
   Password: pqrs5678

--> PayPal business account
1.  Email ID: info@ecomservices.com
    System Generated Password: 1-8?+kAp

2. Email: ecom@business.in
   Password: pqrs5678

------------------------------------------------------------------------------------------------------------------------

--> @property decorator allows us to use a method as an attribute of a class.
    e.g.

    class A:

        def __init__(self):
            self.var1 = 0
            self.var2 = None

        def get_var3(self):
            return var3

        def set_var3(self, value):
            self.var3 = value

    -------------------------------------------------

    class A:

        def __init__(self):
            self.var1 = 0
            self.var2 = None

        @property
        def var3(self, value):
            return value

--> Add @property decorator in Product class for Image field so that the page does not give an error
    when there is no image url found.

--> Steps for rendering cart page.
    1. Add a User or Users via admin page.
    2. Add a customer (which is a User) to the Customer models.
    3. Add an Order instance to the Order model by linking a Customer.
    4. Create an OrderItem instance for OrderItem model by linking Product instance and Order instance.
    5. Render the data to the cart page.

--> Predicted approach for calculating totals.
    1. Items = len(order_items)
    2. total = 0
       for item in order_items:
           total += (item.product.price)*(item.quantity)
       context = {'total_items': Items, 'total_amount': total}

--> We add @property in OrderItem model to get the total price of each order item, i.e.,
    product.price * quantity = total


------------------------------------------------------------------------------------------------------------------------
Other functionalities

-> Admin page to view all orders.
-> Show all previous orders.
-> Give an option to place same order as last order.
-> Modify checkout and shipping address form to class derived form using forms.py instead of pure html form.
-> Recommendation system for products.
-> Data analysis of customers (demographics, clustering, etc).
-> Sales prediction.
-> Other applicable ML on e-commerce systems.

